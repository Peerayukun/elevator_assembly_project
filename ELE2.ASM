ORG 30H
ELE2 EQU P1 ;OUTPUT LED
;STATUS NAME
STATUS1 EQU P0.4
STATUS2 EQU P0.5
ALLOWSTATUS1 EQU P0.6
ALLOWSTATUS2 EQU P0.7
;SWITCH NAME
OUT1UP EQU P3.0 
OUT2UP  EQU P3.1
OUT2DOWN  EQU P3.2
OUT3UP  EQU P3.3
OUT3DOWN  EQU P3.4
OUT4DOWN EQU P3.5
IN1 EQU P0.0
IN2 EQU P0.1
IN3 EQU P0.2
IN4 EQU P0.3
;INITAIL CONDITION
MOV ELE2,#01H
SETB P2.0
CLR P2.1
CLR P2.2
CLR P2.3
MOV R1,#00H
START:	CLR STATUS2
	SETB ALLOWSTATUS2
	MOV R0,ELE2
;CHECK INSIDE SWITCH WHILE STOP
STOPCHECKINSIDE:	JNB IN1,SKIP1
			JNB IN2,SKIP2
			JNB IN3,SKIP3
			JNB IN4,SKIP4
			CJNE R1,#00H,STOREMOVE ;CHECK LAST ORDER
			JNB ALLOWSTATUS1,START ; ele1 forbits ele2
;CHEK OUTSIDE SWITCH WHILE STOP
STOPCHECKOUTSIDE:	JNB OUT1UP,PF1 
			JNB OUT2UP,PF2 
			JNB OUT2DOWN,PF3
			JNB OUT3UP,PF4
			JNB OUT3DOWN,PF5 
			JNB OUT4DOWN,PF6 
			SJMP START
SKIP1: LJMP F1
SKIP2: LJMP F2
SKIP3: LJMP F3
SKIP4: LJMP F4
;LAST ORDER	
STOREMOVE:  	JB ALLOWSTATUS1,STOREMOVE1
		MOV R1,#00H
		SJMP START			
STOREMOVE1:	CJNE R1,#01H,STOREMOVE2
		MOV R1,#00H
		LJMP F1
STOREMOVE2: 	CJNE R1,#02H,STOREMOVE3
		MOV R1,#00H
		LJMP F2
STOREMOVE3: 	CJNE R1,#03H,STOREMOVE4
		MOV R1,#00H
		LJMP F3
STOREMOVE4: 	CJNE R1,#04H,STOPCHECKOUTSIDE
		MOV R1,#00H
		LJMP F4
			
;REMEMBER SWITCH PRESSED 
PF1:	MOV R3,#01H
	SJMP CHECKSTATUS
PF2:	MOV R3,#02H
	SJMP CHECKSTATUS
PF3:	MOV R3,#02H  
	SJMP CHECKSTATUS
PF4:	MOV R3,#03H
	SJMP CHECKSTATUS
PF5:	MOV R3,#03H
	SJMP CHECKSTATUS
PF6:	MOV R3,#04H
	SJMP CHECKSTATUS

SKIP5:	LJMP DESTINATIONCHECK1
;CONDITION CHECK BEFORE OPERATING
CHECKSTATUS:	JB STATUS1,SKIP5
;COMPARE WHICH ONE IS CLOSEST
		MOV A,P2 ;ele1 ele2
		SUBB A,R0 ;ele1 ele2 - 0 ele2 = ele1 0
		SWAP A ; 0 ele1
		MOV 15H,A ;ELE1 FLOOR
		MOV 14H,R3 ;CALLING FLOOR
		MOV 13H,R0 ;ELE2 FLOOR 
		MOV 16H,15H ;BACK UP ELE1 FLOOR
		MOV R7,#00H
COMPAREUP:	MOV A,15H
		CJNE A,14H,RECHECK1
		;ELE1 FLOOR==CALLING FLOOR 
		SJMP STACK1
RECHECK1:	MOV A,13H
		CJNE A,14H,RECHECK2
		;ELE2 FLOOR==CALLING FLOOR 
		SJMP STACK2
RECHECK2:	INC 15H
		INC 13H
		INC R7
		CJNE R7,#04H,COMPAREUP	
PRECOMPAREDOWN:	MOV 13H,R0 ;ELE2 FLOOR
		MOV 15H,16H ;RECOVERY BACK UP ELE1 FLOOR
		MOV R7,#00H
COMPAREDOWN:	MOV A,15H
		CJNE A,14H,RECHECK3
		SJMP STACK3
RECHECK3:	MOV A,13H
		CJNE A,14H,RECHECK4
		SJMP STACK4
RECHECK4:	DEC 15H
		DEC 13H
		INC R7
		CJNE R7,#04H,COMPAREDOWN
MORELESS:	DJNZ 17H,NEXT
		LJMP START
NEXT:		DJNZ 18H,MORELESS
		SJMP DESTINATIONCHECK1
				
STACK1:	MOV 17H,R7
	MOV 18H,#0FFH
	CJNE R7,#00H,PRECOMPAREDOWN
	LJMP START
STACK2:	MOV 18H,R7
	MOV 17H,#0FFH
	CJNE R7,#00H,PRECOMPAREDOWN
	SJMP DESTINATIONCHECK1
STACK3:	MOV 19H,R7
		;compare with 17h and 18h
	CJNE R7,#00H,MORELESS2
	LJMP START
MORELESS2:	DJNZ 19H,NEXT2
		LJMP START
NEXT2:		DJNZ 17H,NEXT3
		LJMP START
NEXT3:		DJNZ 18H,MORELESS2
		SJMP DESTINATIONCHECK1
			
STACK4:	MOV 20H,R7
		;compare with 17h and 18h
	CJNE R7,#00H,MORELESS3
	SJMP DESTINATIONCHECK1
MORELESS3:	DJNZ 17H,NEXT4
		LJMP START
NEXT4:		DJNZ 20H,NEXT5
		SJMP DESTINATIONCHECK1
NEXT5:		DJNZ 18H,MORELESS3
		SJMP DESTINATIONCHECK1
				
DESTINATIONCHECK1: 	SETB STATUS2
			CLR ALLOWSTATUS2
			CJNE R3,#01H,DESTINATIONCHECK2
			SJMP F1
DESTINATIONCHECK2: 	CJNE R3,#02H,DESTINATIONCHECK3
			SJMP F2
DESTINATIONCHECK3: 	CJNE R3,#03H,DESTINATIONCHECK4
			SJMP F3
DESTINATIONCHECK4: 	CJNE R3,#04H,DESTINATIONCHECK1
			SJMP F4

F1: 	SETB STATUS2
	CLR ALLOWSTATUS2
	MOV 10H,#01H 
	CJNE R0,#01H,ELEDOWN ; if ele is at higher than 1 floor, it'll go down
	LJMP START ; ele is now at 1 floor, nothing happen

F2:	MOV 10H,#02H ; save the destination at 10h 
	MOV A,R0 
	SUBB A,#02H 
	JZ SKIP6 ; if accumulator is 0, then jump
	SETB STATUS2
	CLR ALLOWSTATUS2
	CJNE A,#0FFH,ELEDOWN ; 1111 1111 + 0000 0002 = 1 0000 0001 = 0000 0001
	SJMP ELEUP ; 01 = ff+02 or 01-02 = ff. if ele(r0) is at 01 floor
SKIP6:	LJMP START

F3: 	MOV 10H,#03H 
	MOV A,R0
	SUBB A,#03H 
	JZ SKIP6 
	SETB STATUS2
	CLR ALLOWSTATUS2
	CJNE A,#01H,ELEUP 
	SJMP ELEDOWN 

F4:	SETB STATUS2
	CLR ALLOWSTATUS2
	MOV 10H,#04H 
	CJNE R0,#04H,ELEUP 
	LJMP START

ELEDOWN:	MOV 11H,#01H ;DOWN OPERATION STATUS STORE IN 11H
		ACALL DELAY
		DEC R0
		MOV ELE2,R0
		ACALL COMMU
		ACALL DELAY
		MOV A,R0
		CJNE A,10H,CHECKWHENMOVE ;ARRIVE?
		LJMP START
			
ELEUP:		MOV 11H,#00H ;UP OPERATION STATUS STORE IN 11H
		ACALL DELAY
		INC R0 ; R0++
		MOV ELE2,R0
		ACALL COMMU
		ACALL DELAY
		MOV A,R0
		CJNE A,10H,CHECKWHENMOVE
		LJMP START	
			
CHECKWHENMOVE:	MOV R4,P3
		MOV A,R4
		CPL A
		MOV R4,A
		CJNE R4,#00H,CHECKWHENMOVE1 ;any outside SWs pressed?
		MOV A,11H
		CJNE A,#01H,ELEUP ; check operation status(up or down?)
		SJMP ELEDOWN
				
CHECKWHENMOVE1: CJNE R4,#01H,CHECKWHENMOVE2
		MOV 12H,#01H
CHECKWHENMOVE2: CJNE R4,#02H,CHECKWHENMOVE3
		MOV 12H,#02H
CHECKWHENMOVE3: CJNE R4,#04H,CHECKWHENMOVE4
		MOV 12H,#02H
CHECKWHENMOVE4: CJNE R4,#08H,CHECKWHENMOVE5
		MOV 12H,#03H
CHECKWHENMOVE5: CJNE R4,#10H,CHECKWHENMOVE6
		MOV 12H,#03H
CHECKWHENMOVE6: CJNE R4,#20H,COMPARESWICHFLOOR
		MOV 12H,#04H
COMPARESWICHFLOOR:	MOV A,R0
			DEC A 
			CJNE A,12H,REDO2
			;CALL SWITCH IS LOWER
			MOV R5,11H			
			CJNE R5,#00H,CHECKCALL1 ;THE OPERATION IS DOWN JUMP TO CHECKCALL1
			;THE OPERATION IS UP
			ACALL ALLOW_CHECK_WHILE_OP
			SJMP ELEUP
REDO2:	DEC A
	CJNE A,12H,REDO3
	;CALL SWITCH IS LOWER
	MOV R5,11H			
	CJNE R5,#00H,CHECKCALL1		;THE OPERATION IS DOWN JUMP TO CHECKCALL1
	;THE OPERATION IS UP
	ACALL ALLOW_CHECK_WHILE_OP
	SJMP ELEUP
REDO3:	DEC A
	CJNE A,12H,HIGHERCONDITION		;CALL SWITCH IS HIGHER
	;CALL SWITCH IS LOWER
	MOV R5,11H
	CJNE R5,#00H,CHECKCALL1		;THE OPERATION IS DOWN JUMP TO CHECKCALL1
	;THE OPERATION IS UP
	ACALL ALLOW_CHECK_WHILE_OP
	SJMP ELEUP

;ELEVATOR IS GOING DOWN
CHECKCALL1: 	CJNE R4,#01H,CHECKCALL2 ;0000 0001
		;SWITCH IS CALL UP
		ACALL ALLOW_CHECK_WHILE_OP
		LJMP ELEDOWN
CHECKCALL2: 	CJNE R4,#02H,CHECKCALL3 ;0000 0010
		;SWITCH IS CALL UP
		ACALL ALLOW_CHECK_WHILE_OP
		LJMP ELEDOWN
CHECKCALL3: 	CJNE R4,#08H,SKIP7 ;0000 1000
		;SWITCH IS CALL UP
		ACALL ALLOW_CHECK_WHILE_OP
		LJMP ELEDOWN
SKIP7:		LJMP ELEDOWN
			
HIGHERCONDITION:MOV R5,11H
		CJNE R5,#01H,CHECKCALL5		
		;THE OPERATION IS DOWN
		ACALL ALLOW_CHECK_WHILE_OP
		LJMP ELEDOWN
				
;ELEVATOR IS GOING UP
CHECKCALL5: 	CJNE R4,#01H,CHECKCALL6
		;SWITCH IS CALL UP
		LJMP ELEUP
CHECKCALL6: 	CJNE R4,#02H,CHECKCALL7
		;SWITCH IS CALL UP
		LJMP ELEUP
CHECKCALL7: 	CJNE R4,#08H,CHECKCALL8
		;SWITCH IS CALL UP
		LJMP ELEUP
CHECKCALL8:	ACALL ALLOW_CHECK_WHILE_OP
		LJMP ELEUP
			
ALLOW_CHECK_WHILE_OP:	SETB ALLOWSTATUS2
			JB STATUS1,MEM
			SJMP EXT
MEM:	MOV  R1,12H					
EXT:	RET	
			
DELAY: 	MOV R5,#07H
DELAY2:	MOV R6,#0FFH
OUTER:	MOV R7,#0FFH
INNER:	DJNZ R7,INNER
	DJNZ R6,OUTER
	DJNZ R5,DELAY2
RET
;send the elevator's floor message
COMMU:	CJNE R0,#01H,CHECK2
	SETB P2.0
	CLR P2.1
	CLR P2.2
	CLR P2.3 ;p2.0-2.3 = 01
CHECK2:	CJNE R0,#02H,CHECK3
	CLR P2.0
	SETB P2.1
	CLR P2.2
	CLR P2.3 ;p2.0-2.3 = 02
CHECK3: CJNE R0,#03H,CHECK4
	SETB P2.0
	SETB P2.1
	CLR P2.2
	CLR P2.3 ;p2.0-2.3 = 03
CHECK4:	CJNE R0,#04H,OUTT
	CLR P2.0
	CLR P2.1
	SETB P2.2
	CLR P2.3 ;p2.0-2.3 = 04
OUTT:	RET	
END